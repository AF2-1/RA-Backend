plugins {
    id 'org.springframework.boot' version '2.6.1'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'com.palantir.docker' version '0.31.0'
    id 'com.palantir.docker-run' version '0.31.0'
    id 'jacoco'
}

group = 'kr.co.tmax'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

test {
    useJUnitPlatform()
    // test 태스크 종류 후 jacocoTestReport 태스크 실행
    finalizedBy jacocoTestReport
}

jacoco {
    toolVersion = "0.8.7"
    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}

jacocoTestReport {
    reports {
        // 원하는 리포트를 켜고 끌 수 있다
        html.required = true
        xml.required = false
        csv.required = false

        //  각 리포트 타입 마다 리포트 저장 경로를 설정할 수 있다
        html.outputLocation = layout.buildDirectory.dir('test-coverage/jacocoHtml')
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "kr/co/tmax/rabackend/RaBackendApplication.class",
                    "kr/co/tmax/rabackend/config/*",
                    "kr/co/tmax/rabackend/exception/*",
                    "**/*Command.class",
                    "**/*Dto.class",
                    "**/*Request.class",
                    "kr/co/tmax/rabackend/domain/user/*",
                    "kr/co/tmax/rabackend/interfaces/strategy/CompleteStrategyRequestValidator.class",
                    "kr/co/tmax/rabackend/security/*",
                    "kr/co/tmax/rabackend/interfaces/alert/*",
                    "kr/co/tmax/rabackend/util/*"
            ])
        }))
    }

    // jacocoTestReport 태스크는 test 태스크에 의존한다
    // 즉 test 태스크 실행 후 jacocoTestReport가 실행된다
    dependsOn test

    // jacocoTestReport 태스크 실행 후 jacocoTestCoverageVerification 태스크가 시행된다
    finalizedBy 'jacocoTestCoverageVerification'
}

dependencies {
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation 'org.springframework.data:spring-data-mongodb:3.3.2'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'io.jsonwebtoken:jjwt:0.9.1'
    implementation 'org.glassfish.jaxb:jaxb-runtime'
    implementation 'org.modelmapper:modelmapper:3.0.0'

//    // [JDBC]
//    implementation group: 'mysql', name: 'mysql-connector-java'
//    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // [Jackson]
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind'
    implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310'



    // [Swagger]
    implementation 'io.springfox:springfox-boot-starter:3.0.0'
    implementation "io.springfox:springfox-swagger-ui:3.0.0"

    // [Guava]
    implementation group: 'com.google.guava', name: 'guava', version: '31.0.1-jre'

    // [Sentry]
    implementation group: 'io.sentry', name: 'sentry', version: '6.0.0-alpha.2'

    // [Slack]
    implementation group: 'com.slack.api', name: 'slack-api-client', version: '1.20.0'
    implementation group: 'com.slack.api', name: 'bolt', version: '1.20.0'

    // [Lombok]
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor("org.projectlombok:lombok")

    // [Redis]
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-redis'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
}

String dockerHubUsernameProperty = findProperty('dockerHubUsername') ?: 'neptunes032'
String imageName = "${dockerHubUsernameProperty}/ra-backend:$version"

docker {
    name imageName
    files "build/libs/${bootJar.archiveFileName.get()}"
    buildArgs([JAR_FILE: bootJar.archiveFileName.get()])
}

dockerRun {
    name project.name
    image imageName
    ports '8080:8080'
    clean true
    daemonize true
    arguments '--network=ra-net'
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = true
            element = 'CLASS'
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
//                minimum = 0.30
            }
        }
    }
}